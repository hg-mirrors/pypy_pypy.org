---
layout: page
title: Features
---

PyPy features
===========================================================

PyPy implements Python language version 2.5. It supports all of the core
language, passing Python test suite (with minor modifications that were
already accepted in main python in newer versions). It supports most
of commonly used Python standard library modules.  For known differences
with CPython, see our `compatibility`_ page.

PyPy 1.2 runs essentially only on Intel `x86 (IA-32)`_.  On 64-bit platforms
you have to use the 32-bit compatibility mode, for now -- or `contact us`_
to help!

.. _`compatibility`: compat.html
.. _`x86 (IA-32)`: http://en.wikipedia.org/wiki/IA-32
.. _`contact us`: http://codespeak.net/mailman/listinfo/pypy-dev


Speed or memory usage?
-------------------------------

Our `main prototype`_ comes with a Just-in-Time compiler.  It is
`really fast`_ in running most benchmarks.  `Try it out!`_

An issue with our JIT compiler is that it's hard to control
the exact amount of RAM that is used.  If this is an important
issue to you, you can try our `baseline version`_, which does
not include a JIT compiler at all.

.. _`main prototype`: download.html#with-a-jit-compiler
.. _`Try it out!`: download.html#with-a-jit-compiler
.. _`really fast`: http://speed.pypy.org/
.. _`baseline version`: download.html#with-no-jit-compiler


Sandboxing
--------------------

PyPy's *sandboxing* is a working prototype for the idea of running untrusted
user programs. Unlike other sandboxing approaches for Python, PyPy's does not
try to limit language features considered "unsafe". Instead we replace all
calls to external libraries (C or platform) with a stub that communicates
with an external process handling the policy.

To run the sandboxed process, get a `sandboxed pypy-c`_ and run::

   pypy_interact.py pypy-c-sandbox

To read more about its features, go to `our dev site`_.

.. _`sandboxed pypy-c`: download.html#sandboxed-version
.. _`our dev site`: http://codespeak.net/pypy/dist/pypy/doc/sandbox.html


Stackless
--------------------------

PyPy is also available in a separate `Stackless version`_ that includes
support for micro-threads for massive concurrency.  Read more about
it at the Stackless_ main site (we provide the same interface as the
standard Stackless Python), and at the greenlets_ page.

.. _`Stackless version`: download.html#stackless-version
.. _`stackless`: http://www.stackless.com/
.. _`greenlets`: http://codespeak.net/svn/greenlet/trunk/doc/greenlet.txt


Other features
---------------------------------------

PyPy has many secondary features and semi-independent
projects.  We will mention here:

* **the .NET backend:** you get a version of ``pypy-c`` that runs
  natively in the .NET/CLI VM.  Of particular interest is `the cli-jit
  branch,`_ in which you can make a version of ``pypy-c`` which also
  contains a high-level JIT compiler (it compiles your Python programs
  Just in Time into CLR bytecodes, which are in turn compiled natively
  by the VM).

* **the Java backend:** PyPy can run on the Java VM, but more
  care is needed to finish this project.  Writing a backend for our
  high-level JIT compiler would be excellent.  `Contact us!`_

* **Other languages:** available in a `separate part of the repository`_,
  we implemented other languages too: Prolog_ (almost complete), as
  well as Smalltalk, JavaScript, Io, Scheme and Gameboy.


.. _`the cli-jit branch,`: http://codespeak.net/svn/pypy/branch/cli-jit/
.. _`contact us!`: http://codespeak.net/mailman/listinfo/pypy-dev
.. _`separate part of the repository`: http://codespeak.net/svn/pypy/lang/
.. _Prolog: http://codespeak.net/svn/pypy/lang/prolog
