---
layout: page
title: Download and install
---

Download
============================================================

Here are the various binaries of **PyPy 1.4** that we provide for x86 Linux,
Mac OS/X or Windows. This release improves over 1.3 in terms of speed,
memory usage and stability.

.. class:: download_menu

 * Download                         
                                                 
   * `Default (with a JIT Compiler)`_
   * `Other versions (without a JIT)`_
                                                 
 * `Installing`_ (optional)                      
 * `Building from source`_                       
 * `Checksums`_

.. _`Default (with a JIT Compiler)`:

"JIT Compiler" version
-------------------------------

These binaries include a Just-in-Time compiler.  They only work on
x86 CPUs that have the SSE2_ instruction set (most of
them do, nowadays), or on x86-64 CPUs.

* `Linux binary (32bit)`__
* `Linux binary (64bit)`__
* `Mac OS/X binary (32bit)`__
* `Mac OS/X binary (64bit)`__
* `Windows binary (32bit)`__ (you may need to install the `VS 2010 runtime libraries`_)

.. __: http://pypy.org/download/pypy-1.4-linux.tar.bz2
.. __: http://pypy.org/download/pypy-1.4-linux64.tar.bz2
.. __: http://pypy.org/download/pypy-1.4-osx.tar.bz2
.. __: http://pypy.org/download/pypy-1.4-osx64.tar.bz2
.. __: http://pypy.org/download/pypy-1.4-win32.zip
.. _`VS 2010 runtime libraries`: http://www.microsoft.com/downloads/en/details.aspx?familyid=A7B7A05E-6DE6-4D3A-A423-37BF0912DB84

If your CPU is really old, it may not have SSE2.  In this case, you need
to translate_ yourself with the option ``--jit-backend=x86-without-sse2``.

.. _`Other versions (without a JIT)`:

Other versions
-------------------------------

The other versions of PyPy are:

* No JIT: A version without the JIT.  Consumes a bit less memory
  and may be faster on short-running scripts.

* Stackless: Provides Stackless_ extensions, as well as greenlets_.
  It is not possible right now to combine Stackless features with the JIT.
    
* Sandboxing: A special safe version.  Read the docs about sandboxing_.
  (It is also possible to translate_ a version that includes both
  sandboxing and the JIT compiler, although as the JIT is relatively
  complicated, this reduces a bit the level of confidence we can put in
  the result.)

These versions are not officially part of the release 1.4, which focuses
on the JIT.  You can find prebuilt binaries for them on our
`nightly build`_ or in the `release`_ binaries, or translate_ them
yourself.

.. _`nightly build`: http://buildbot.pypy.org/nightly/trunk/
.. _`release`: http://pypy.org/download/


Installing
-------------------------------

All versions are packaged in a ``tar.bz2`` or ``zip`` file.  When
uncompressed, they run in-place.  For now you can uncompress them
either somewhere in your home directory or, say, in ``/opt``, and
if you want, put a symlink from somewhere like
``/usr/local/bin/pypy`` to ``/path/to/pypy-1.4/bin/pypy``.  Do
not move or copy the executable ``pypy`` outside the tree --- put
a symlink to it, otherwise it will not find its libraries.


.. _translate:

Building from source
-------------------------------

1. Get the source code.  The following packages contain the source at
   the same revision as the above binaries (these are svn exports):

   * `pypy-1.4-src.tar.bz2`__ (sources, Unix line endings)
   * `pypy-1.4-src.zip`__ (sources, Windows line endings)

   .. __: http://pypy.org/download/pypy-1.4-src.tar.bz2
   .. __: http://pypy.org/download/pypy-1.4-src.zip

   Or you can checkout the current trunk using Subversion_ (the trunk
   usually works and is of course more up-to-date)::

     svn co http://codespeak.net/svn/pypy/trunk pypy-trunk

   It is not recommended to use external tools like ``hg convert``
   instead of ``svn``, because these are known to have issues with
   the PyPy repository.

2. Make sure you installed the dependencies.  See the list here__.

   .. __: http://codespeak.net/pypy/dist/pypy/doc/getting-started-python.html#translating-the-pypy-python-interpreter

3. Enter the ``goal`` directory::

     cd pypy-trunk/pypy/translator/goal

4. Run the ``translate.py`` script.  Here are the common combinations
   of options (works also with ``python`` instead of ``pypy``)::

     pypy translate.py -Ojit                # get the JIT version
     pypy translate.py -O2                  # get the no-jit version
     pypy translate.py --sandbox            # get the sandbox version
     pypy translate.py --stackless          # get the stackless version
     pypy translate.py -Ojit --backend=cli  # only for branch/cli-jit

5. Enjoy Mandelbrot ``:-)``  It takes on the order of half an hour to
   finish the translation, and 1.7 GB of RAM on a 32-bit system
   and 3.0 GB on 64-bit systems.  (Do not start a translation on a
   machine with insufficient RAM!  It will just swap forever.)

Notes:

* It is recommended to use PyPy to do translations, instead of using CPython,
  because it is twice as fast.  (Using CPython would lower the memory
  requirement down to 1.2 GB on 32-bit, 2.4 GB on 64-bit.)
  You should just start by downloading an official release of PyPy (with the
  JIT).

* Because of ``asmgcroot``, compiling the generated C files containing the
  JIT is delicate.  It requires using either MSVC or gcc with no particularly
  fancy options.  It does not work e.g. with clang, or if you pass uncommon
  options with the ``CFLAGS`` environment variable.  The generated C files
  are left around in ``/tmp/usession-$USER/testing_1/`` or
  ``$TMPDIR/usession-$USER/testing_1``, so if compilation
  fails (i.e. you get a ``CompilationError``) or if you want to build a
  debug build, you can go there and retry running ``make``.  For example:
  ``CFLAGS= make``, or ``make lldebug``.  It is recommended to move this
  directory away if you want to keep it; otherwise, future runs of
  ``translate.py`` will remove it.

.. _`x86 (IA-32)`: http://en.wikipedia.org/wiki/IA-32
.. _`x86-64`: http://en.wikipedia.org/wiki/X86-64
.. _SSE2: http://en.wikipedia.org/wiki/SSE2
.. _`ctypes`: http://www.python.org/doc/2.5.4/lib/module-ctypes.html
.. _`contact us`: contact.html
.. _`sandboxing`: features.html#sandboxing
.. _`stackless`: http://www.stackless.com/
.. _`greenlets`: http://codespeak.net/svn/greenlet/trunk/doc/greenlet.txt
.. _Subversion: http://subversion.tigris.org/

Checksums
---------

Here are the checksums for each of the downloads::

  MD5(pypy-1.4-linux-nojit.tar.bz2)= da4a1be5e2881effcd4cd7e6c999e47c
  MD5(pypy-1.4-linux-stackless.tar.bz2)= 2cadb3d5d7267f47fb8e0cb97ca1a396
  MD5(pypy-1.4-linux.tar.bz2)= f1e192e1619aa09bd192a0e19197da3d
  MD5(pypy-1.4-linux64-nojit.tar.bz2)= c9b96aad34225ba6fc8868678cbfc84f
  MD5(pypy-1.4-linux64.tar.bz2)= 95531a85a8baca915ec8885b097d6797
  MD5(pypy-1.4-osx.tar.bz2)= b715229d2a2b4c7129f7867fd84e7caf
  MD5(pypy-1.4-osx64.tar.bz2)= 23ed155d7a8a214c61efc9000d559383
  MD5(pypy-1.4-src.tar.bz2)= 6c7e5a3fab4b3f6357aab84927420b49
  MD5(pypy-1.4-win32.zip)= 2e2cf438b69058c70e174b1af4e91295

  SHA1(pypy-1.4-linux-nojit.tar.bz2)= 9c7ba0e70c23e0761ef48aa99450851619cd2cd3
  SHA1(pypy-1.4-linux-stackless.tar.bz2)= 752c6a3dfb9de7e37037dee0b18968e12b7b226a
  SHA1(pypy-1.4-linux.tar.bz2)= 5924cc642944dc12c023ed494bf0d9757eec8ea6
  SHA1(pypy-1.4-linux64-nojit.tar.bz2)= 9526fa7aeb686cd67f1749de57818f86dca3729b
  SHA1(pypy-1.4-linux64.tar.bz2)= 2092e10c04aa0cedce315019d75d6cba2b5b86c4
  SHA1(pypy-1.4-osx.tar.bz2)= aa27ec482d1007262ad07a58cddbde93799bc532
  SHA1(pypy-1.4-osx64.tar.bz2)= a29eb96cb2109c6f35b78a18e8bdb334b67ff5fe
  SHA1(pypy-1.4-src.tar.bz2)= 22cb3d9d4ecf6a8d1094708df7cfe5633f848d22
  SHA1(pypy-1.4-win32.zip)= 64beb3f25619f324b48a9ff9b04811e5754fcd24

