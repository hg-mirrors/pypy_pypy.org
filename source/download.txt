---
layout: page
title: Download and install
---

Download
============================================================

.. class:: download_menu

  There are `nightly binary builds`_ available. Those builds are not always
  as stable as the release, but they contain numerous bugfixes and
  performance improvements.

We provide binaries for x86, ARM, PPC and s390x running on different operating systems such as
Linux, Mac OS/X and Windows:

* the Python2.7 compatible release — **PyPy2.7 v5.7.1** — (`what's new in PyPy2.7?`_)

* the Python3.5 compatible beta quality release — **PyPy3.5 v5.7.1** — (`what's new in PyPy3.5?`_).

* the Python2.7 Software Transactional Memory special release — **PyPy-STM 2.5.1** (Linux x86-64 only)

.. _what's new in PyPy2.7?: http://doc.pypy.org/en/latest/release-v5.7.1.html
.. _what's new in PyPy3.5?: http://doc.pypy.org/en/latest/release-v5.7.1.html


.. class:: download_menu

 * Download

   * `Default (with a JIT Compiler)`_
   * `Other versions`_

 * `Installing`_ (optional)
 * `Installing more modules`_
 * `Installing NumPy`_ (optional)
 * `Building from source`_
 * `Packaging`_
 * `Checksums`_

.. _`Default (with a JIT Compiler)`:

"JIT Compiler" version
-------------------------------

These binaries include a Just-in-Time compiler.  They only work on
x86 CPUs that have the SSE2_ instruction set (most of
them do, nowadays), or on x86-64 CPUs. They also contain `stackless`_
extensions, like `greenlets`_.

Linux binaries and common distributions
---------------------------------------

Linux binaries are dynamically linked, as is usual, and thus might
not be usable due to the sad story of linux binary compatibility.  This means
that **Linux binaries are only usable on the distributions written next to
them** unless you're ready to hack your system by adding symlinks to the
libraries it tries to open.  There are better solutions:

* use Squeaky's `portable Linux binaries`_.

* or download PyPy from your release vendor (usually an outdated
  version): `Ubuntu`_ (`PPA`_), `Debian`_, `Homebrew`_, MacPorts,
  `Fedora`_, `Gentoo`_ and `Arch`_ are known to package PyPy, with various
  degrees of being up-to-date.

* or translate_ your own PyPy.

.. _`Ubuntu`: http://packages.ubuntu.com/search?keywords=pypy&searchon=names
.. _`PPA`: https://launchpad.net/~pypy/+archive/ppa
.. _`Debian`: http://packages.debian.org/sid/pypy
.. _`Fedora`: http://fedoraproject.org/wiki/Features/PyPyStack
.. _`Gentoo`: http://packages.gentoo.org/package/dev-python/pypy
.. _`Homebrew`: https://github.com/mxcl/homebrew/blob/master/Library/Formula/pypy.rb
.. _`Arch`: https://wiki.archlinux.org/index.php/PyPy
.. _`portable Linux binaries`: https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux


.. _release:

Python2.7 compatible PyPy 5.7.1
-------------------------------

* `Linux x86 binary (32bit, tar.bz2 built on Ubuntu 12.04 - 14.04)`__ (see ``[1]`` below)
* `Linux x86-64 binary (64bit, tar.bz2 built on Ubuntu 12.04 - 14.04)`__ (see ``[1]`` below)
* `ARM Hardfloat Linux binary (ARMHF/gnueabihf, tar.bz2, Raspbian)`__ (see ``[1]`` below)
* `ARM Hardfloat Linux binary (ARMHF/gnueabihf, tar.bz2, Ubuntu Raring)`__ (see ``[1]`` below)
* `ARM Softfloat Linux binary (ARMEL/gnueabi, tar.bz2,  Ubuntu Precise)`__ (see ``[1]`` below)
* `Mac OS/X binary (64bit)`__
* FreeBSD x86 and x86_64: see FreshPorts_
* `Windows binary (32bit)`__ (you might need the VS 2008 runtime library
  installer `vcredist_x86.exe`_.)
* `PowerPC PPC64 Linux binary (64bit big-endian, Fedora 20)`__ (see ``[1]`` below)
* `PowerPC PPC64le Linux binary (64bit little-endian, Fedora 21)`__ (see ``[1]`` below)
* `s390x Linux binary (tar.bz2 built on Redhat Linux 7.2)`__ (see ``[1]`` below)
* `Source (tar.bz2)`__; `Source (zip)`__.  See below for more about the sources.
* `All our downloads,`__ including previous versions.  We also have a
  mirror_, but please use only if you have troubles accessing the links above

.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-linux32.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-linux64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-linux-armhf-raspbian.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-linux-armhf-raring.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-linux-armel.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-osx64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-win32.zip
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-ppc64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-ppc64le.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-s390x.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-src.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-src.zip
.. _`vcredist_x86.exe`: http://www.microsoft.com/en-us/download/details.aspx?id=5582
.. __: https://bitbucket.org/pypy/pypy/downloads
.. _mirror: http://buildbot.pypy.org/mirror/
.. _FreshPorts: http://www.freshports.org/lang/pypy

Python 3.5.3 compatible PyPy3.5 v5.7
------------------------------------

.. class:: download_menu

    Warning: PyPy3.5 is considered **beta software.**  All binaries
    are thus called "beta".  It is known to be rarely much slower than
    PyPy 2.  You are welcome to use it anyway; if you're lucky it will
    be fast in your case.  

* `Linux x86-64 binary (64bit, tar.bz2 built on Ubuntu 12.04 - 14.04)`__ (see ``[1]`` below)
* `Source (tar.bz2)`__
* `Source (zip)`__
* `All our downloads,`__ including previous versions.  We also have a
  mirror_, but please use only if you have troubles accessing the links above

.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3-v5.7.1-linux64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3-v5.7.1-src.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3-v5.7.1-src.zip
.. __: https://bitbucket.org/pypy/pypy/downloads

If your CPU is really, really old, it may be a x86-32 without SSE2.
There is untested support for manually translating PyPy's JIT without
SSE2 (``--jit-backend=x86-without-sse2``) but note that your machine
is probably low-spec enough that running CPython on it is a better
idea in the first place.

``[1]:`` stating it again: the Linux binaries are provided for the
distributions listed here.  **If your distribution is not exactly this
one, it won't work,** you will probably see: ``pypy: error while loading shared
libraries: ...``.  Unless you want to hack a lot, try out the
`portable Linux binaries`_.


PyPy-STM 2.5.1
------------------------------

This is a special version of PyPy!  See the `Software Transactional
Memory`_ (STM) documentation.

* `PyPy-STM Linux x86-64 binary (64bit, tar.bz2 built on Ubuntu 12.04 - 14.04)`__

.. _`Software Transactional Memory`: http://doc.pypy.org/en/latest/stm.html
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy-stm-2.5.1-linux64.tar.bz2


.. _`Other versions (without a JIT)`:

Other versions
-------------------------------

The other versions of PyPy are:

* The most up-to-date `nightly binary builds`_ with a JIT, if the official
  release is too old for what you want to do. There are versions for
  different libc on this site too.

* Reverse debugger: This version enables debugging your Python
  programs by going forward and backward in time.  See the `RevDB
  documentation`__.

.. __: https://bitbucket.org/pypy/revdb/

* Sandboxing: A special safe version.  Read the docs about sandboxing_.
  (It is also possible to translate_ a version that includes both
  sandboxing and the JIT compiler, although as the JIT is relatively
  complicated, this reduces a bit the level of confidence we can put in
  the result.) **Note that the sandboxed binary needs a full pypy checkout
  to work**. Consult the `sandbox docs`_ for details. (These are old,
  PyPy 1.8.)

  * `Linux binary (64bit)`__

  * `Linux binary (32bit)`__

.. __: https://bitbucket.org/pypy/pypy/downloads/pypy-1.8-sandbox-linux64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy-1.8-sandbox-linux.tar.bz2
.. _`sandbox docs`: http://doc.pypy.org/en/latest/sandbox.html

.. _`nightly binary builds`: http://buildbot.pypy.org/nightly/trunk/

Installing
----------

All binary versions are packaged in a ``tar.bz2`` or ``zip`` file.  When
uncompressed, they run in-place.  For now you can uncompress them
either somewhere in your home directory or, say, in ``/opt``, and
if you want, put a symlink from somewhere like
``/usr/local/bin/pypy`` to ``/path/to/pypy2-5.7.1/bin/pypy``.  Do
not move or copy the executable ``pypy`` outside the tree --- put
a symlink to it, otherwise it will not find its libraries.


Installing more modules
-------------------------------

There are as yet few distribution-ready packages.
We recommend installing ``pip``, which is the standard package
manager of Python.  It works like it does on CPython as explained in the
`installation documentation`_. 

If you use your distribution's PyPy package we recommend you install packages
into a virtualenv. If you try to build a module and the build process complains
about "missing Python.h", you may need to install the pypy-dev package.

.. _installation documentation: http://doc.pypy.org/en/latest/install.html



Installing NumPy
-------------------------------

**There are two different versions of NumPy for PyPy.**


1. NumPy via cpyext
+++++++++++++++++++

The generally recommended way is to install the original NumPy via the
CPython C API compatibility layer, cpyext.  Modern versions of PyPy
support enough of the C API to make this a reasonable choice in many
cases.  Performance-wise, the speed is mostly the same as CPython's
NumPy (it is the same code); the exception is that interactions between
the Python side and NumPy objects are mediated through the slower cpyext
layer (which hurts a few benchmarks that do a lot of element-by-element
array accesses, for example).

Installation works on any recent PyPy (the release_ above is fine, a recent
nightly will implement more of the new buffer protocol).
The currently released numpy 1.12 works except for ``nditers`` with the
``updateifcopy`` flag.
For example, without using a virtualenv::

    $ ./pypy-xxx/bin/pypy -m ensurepip
    $ ./pypy-xxx/bin/pypy -mpip install -U wheel # to update wheel
    $ ./pypy-xxx/bin/pip install cython numpy

(See the general `installation documentation`_ for more.)


2. NumPyPy
++++++++++

The "numpy" module can be installed from `our own repository`__ rather
than from the official source.  This version uses internally our
built-in ``_numpypy`` module.  This module is slightly incomplete.
Also, its performance is hard to predict exactly.  For regular NumPy
source code that handles large arrays, it is likely to be slower than
the native NumPy with cpyext.  It is faster on the kind of code that
contains many Python loops doing things on an element-by-element basis.

.. __: https://bitbucket.org/pypy/numpy

Installation (see the `installation documentation`_ for installing ``pip``)::

    pypy -m pip install git+https://bitbucket.org/pypy/numpy.git

Alternatively, the direct way::

    git clone https://bitbucket.org/pypy/numpy.git
    cd numpy
    pypy setup.py install

If you installed to a system directory, you need to also run this once::

    sudo pypy -c 'import numpy'

Note again that this version is still a work-in-progress: many things do
not work and those that do may not be any faster than NumPy on CPython.
For further instructions see `the pypy/numpy repository`__.

.. __: https://bitbucket.org/pypy/numpy


.. _translate:

Building from source
--------------------

(see more build instructions_)


1. Get the source code.  The preferred way is to checkout the current
   trunk using Mercurial_.  The trunk usually works and is of course
   more up-to-date.  The following command should run in about 7 minutes
   nowadays if you have hg >= 3.7 (it is much slower with older versions)::

     hg clone https://bitbucket.org/pypy/pypy

   Alternatively, the following smaller package contains the source at
   the same revision as the above binaries:

   * `pypy2-v5.7.1-src.tar.bz2`__ (sources)

   .. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.7.1-src.tar.bz2


2. Make sure you **installed the dependencies.**  See the list here__.

   .. __: http://pypy.readthedocs.org/en/latest/build.html#install-build-time-dependencies

3. Enter the ``goal`` directory::

     cd pypy/pypy/goal

4. Run the ``rpython`` script.  Here are the common combinations
   of options (works also with ``python`` instead of ``pypy``;
   requires CPython 2.7 or PyPy 2)::

     pypy ../../rpython/bin/rpython -Ojit targetpypystandalone           # get the JIT version
     pypy ../../rpython/bin/rpython -O2 targetpypystandalone             # get the no-jit version
     pypy ../../rpython/bin/rpython -O2 --sandbox targetpypystandalone   # get the sandbox version

5. Enjoy Mandelbrot ``:-)``  It takes on the order of half an hour to
   finish the translation, and about 3GB of RAM on a 32-bit system
   and about 5GB on 64-bit systems.  (Do not start a translation on a
   machine with insufficient RAM!  It will just swap forever.  See
   notes below in that case.)

6. If you want to install this PyPy as root, please read the next section,
   Packaging_.

Notes:

* It is recommended to use PyPy to do translations, instead of using CPython,
  because it is twice as fast.  You should just start by downloading an
  official release of PyPy (with the JIT).  If you really have to use CPython
  then note that we are talking about CPython 2.7 here, not CPython 3.x.
  (Older versions like 2.6 are out.)

* On some 32-bit systems, the address space limit of 2 or 3 GB of RAM
  can be an issue.  More generally you may be just a little bit low of
  RAM.  First note that 2 GB is really not enough nowadays; on Windows
  you first need to refer to the `Windows build instructions`_.  More
  precisely, translation on 32-bit takes at this point 2.7 GB if PyPy is
  used and 2.9 GB if CPython is used.  There are two workarounds:

  1. use PyPy, not CPython.  If you don't have any PyPy so far, not even
  an older version, then you need to build one first, with some parts
  removed.  So, first translate with ``...rpython -Ojit
  targetpypystandalone --withoutmod-micronumpy --withoutmod-cpyext``,
  then copy ``pypy-c`` and ``libpypy_c.so`` somewhere else, and finally
  call it with ``...pypy-c ../../rpython/bin/rpython -Ojit``.

  2. if even using PyPy instead of CPython is not enough, try to tweak
  some internal parameters.  Example (slower but saves around 400MB)::

    PYPY_DONT_RUN_SUBPROCESS=1 PYPY_GC_MAX_DELTA=200MB pypy --jit loop_longevity=300 ../../rpython/bin/rpython -Ojit --source
    # then read the next point about --source

* You can run translations with ``--source``, which only builds the C
  source files (and prints at the end where).  Then you can ``cd`` there
  and execute ``make``.  This is another way to reduce memory usage.
  Note that afterwards, you have to run manually ``pypy-c
  .../pypy/tool/build_cffi_imports.py`` if you want to be able to import
  the cffi-based modules.

* On Linux, translating with ``asmgcroot``, is delicate.  
  It requires using gcc with no particularly
  fancy options.  It does not work e.g. with clang, or if you pass uncommon
  options with the ``CFLAGS`` environment variable.  If you insist on
  passing these options or using clang, then you can compile PyPy with
  the default `shadow stack`_ option instead (for a small performance price in
  non-JITted code).

* Like other JITs, PyPy doesn't work out of the box on some Linux
  distributions that trade full POSIX compliance for extra security
  features.  E.g. with PAX, you have to run PyPy with ``paxctl -cm``.
  This also applies to translation (unless you use CPython to run the
  translation and you specify ``--source``).

.. _instructions: http://pypy.readthedocs.org/en/latest/build.html
.. _`x86 (IA-32)`: http://en.wikipedia.org/wiki/IA-32
.. _`x86-64`: http://en.wikipedia.org/wiki/X86-64
.. _SSE2: http://en.wikipedia.org/wiki/SSE2
.. _`contact us`: contact.html
.. _`sandboxing`: features.html#sandboxing
.. _`stackless`: http://www.stackless.com/
.. _`greenlets`: http://pypy.readthedocs.org/en/latest/stackless.html#greenlets
.. _`Windows build instructions`: http://doc.pypy.org/en/latest/windows.html#preparing-windows-for-the-large-build
.. _`shadow stack`: http://pypy.readthedocs.org/en/latest/config/translation.gcrootfinder.html
.. _Mercurial: https://www.mercurial-scm.org/

Packaging
---------

Once PyPy is translated from source the binary package similar to those
provided in the section `Default (with a JIT Compiler)`_ above could be
easily created with ``package.py`` script as following::

    cd ./pypy/pypy/tool/release/
    python package.py --help #for information
    python package.py --archive-name pypy-my-own-package-name

It is recommended to use package.py because custom scripts will
invariably become out-of-date.  If you want to write custom scripts
anyway, note an easy-to-miss point: some modules are written with CFFI,
and require some compilation.  If you install PyPy as root without
pre-compiling them, normal users will get errors:

* PyPy 2.5.1 or earlier: normal users would see permission errors.
  Installers need to run ``pypy -c "import gdbm"`` and other similar
  commands at install time; the exact list is in `package.py`_.  Users
  seeing a broken installation of PyPy can fix it after-the-fact if they
  have sudo rights, by running once e.g. ``sudo pypy -c "import gdbm``.

* PyPy 2.6 and later: anyone would get ``ImportError: no module named
  _gdbm_cffi``.  Installers need to run ``pypy _gdbm_build.py`` in the
  ``lib_pypy`` directory during the installation process (plus others;
  see the exact list in `package.py`_).  Users seeing a broken
  installation of PyPy can fix it after-the-fact, by running ``pypy
  /path/to/lib_pypy/_gdbm_build.py``.  This command produces a file
  called ``_gdbm_cffi.pypy-41.so`` locally, which is a C extension
  module for PyPy.  You can move it at any place where modules are
  normally found: e.g. in your project's main directory, or in a
  directory that you add to the env var ``PYTHONPATH``.

.. _`package.py`: https://bitbucket.org/pypy/pypy/src/default/pypy/tool/release/package.py

Checksums
---------

Here are the checksums for each of the downloads

pypy2.7-v5.7.1 sha256::

    f125a227f8c814ba1698168a639ea6ca59bb69c280529639eed29076d8429a73  pypy2-v5.7.1-linux32.tar.bz2
    c4fa3da42156bed4a9d912433b618a141e0c5161d7cc8c328786736ea5d1c2da  pypy2-v5.7.1-linux64.tar.bz2
    591a4a73cc945a1125848f3615a28559692db8febf677d7087eaef40cb119a8d  pypy2-v5.7.1-linux-armel.tar.bz2
    c1b1a0968b22c58672f7492dc7900bc85e3bd02c791f219f31401a00ef387207  pypy2-v5.7.1-linux-armhf-raring.tar.bz2
    67544f8c4b284db71cf1af74edef290722f97f82476cbdaff2015fdab244c6ee  pypy2-v5.7.1-linux-armhf-raspbian.tar.bz2
    4e99ba356432861534917a9477ace0ccee617bd631512759a530f8383e153a3d  pypy2-v5.7.1-osx64.tar.bz2
    395c57a1aa078c9ae9aa9f18263bb91fa23114bae4d133d10560eaea30c51892  pypy2-v5.7.1-s390x.tar.bz2
    d01bee43c6df79f7bbc1149bb3e85f489491fb2358a6a1f9a7f0d6e07715832f  pypy2-v5.7.1-src.tar.bz2
    f580a7b41cc09e030bbff66752044bdfbc193ec617e575c64bf65c136c298076  pypy2-v5.7.1-src.zip
    a3ba7c946635236836f8536d8767a0f456b3b9a86876cb5c3173a04522bf451b  pypy2-v5.7.1-win32.zip
    a4edb857c1f001bab4b545f2f87f3653e8cd882a95233d60d584edb9700722e9  pypy2-v5.7.1-ppc64.tar.bz2
    5db9bb6429d9cf146f74360ec30b40bd0df78116f458cf14035a0b7daefa35eb  pypy2-v5.7.1-ppc64le.tar.bz2


pypy 3.5-v5.7.1 sha256::

    2abaa54d88c9b70b64c37083e7e430a1d3a8f78f8de92e484a988b7aca1e50a7  pypy3-v5.7.1-linux64.tar.bz2
    40ece0145282980ac121390f13709404c0532896507d5767496381180b631bd0  pypy3-v5.7.1-src.tar.bz2
    97fb0075ab2ecfb912fab996c71c6a8475ff18766db6c9e060f9384b809500bd  pypy3-v5.7.1-src.zip

pypy3.3-v5.5.0-alpha sha256::

    966ee7951ad497ac907e01554fe48da77cc64a5e35a1307477c2f78652eba622  pypy3.3-v5.5.0-alpha-linux32.tar.bz2
    41ef7c25fd04eeb20deaa83c5d88c10aef2bbc8bcfd9e53e7cc61136220861cc  pypy3.3-v5.5.0-alpha-linux64.tar.bz2
    9f081041867f434f18456f936befbacd9f40c0ede24137cbf80f9f45ff37b69f  pypy3.3-v5.5.0-alpha-linux-armel.tar.bz2
    d8e94c834307081d5c4be863fab935e34df360a77b06e8bc833624c4b712b2aa  pypy3.3-v5.5.0-alpha-linux-armhf-raspbian.tar.bz2
    fa45f861a6c40ae44f99ec94c521adfb6b64b0c9c0b6fc6e9df018241a648986  pypy3.3-v5.5.0-alpha-osx64.tar.bz2
    c4a0a75a987b3dacd811c653e57b6a0a01fc31cdaf671e83ad43f4c107961a02  pypy3.3-v5.5.0-alpha-s390x.tar.bz2
    d5591c34d77253e9ed57d182b6f49585b95f7c09c3e121f0e8630e5a7e75ab5f  pypy3.3-v5.5.0-alpha-src.tar.bz2
    43b3791f77f253d4da59fdeeec49b1daefea9a57321c726a19b4924c520a0b49  pypy3.3-v5.5.0-alpha-src.zip

pypy-1.8 sandbox sha1::

   895aaf7bba5787dd30adda5cc0e0e7fc297c0ca7  pypy-1.8-sandbox-linux64.tar.bz2
   be94460bed8b2682880495435c309b6611ae2c31  pypy-1.8-sandbox-linux.tar.bz2

