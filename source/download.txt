---
layout: page
title: Download and install
---

Download
============================================================

.. class:: download_menu

  There are `nightly binary builds`_ available. Those builds are not always
  as stable as the release, but they contain numerous bugfixes and
  performance improvements. 

We provide binaries for x86, ARM, and PPC Linux, Mac OS/X and Windows for:

* the Python2.7 compatible release — **PyPy2.7 v5.4.0** — (`what's new in PyPy2.7?`_ )
* the Python3.3 compatible release — **PyPy3.3 v5.2-alpha** — (`what's new in PyPy3.3?`_).

* the Python2.7 Software Transactional Memory special release — **PyPy-STM 2.5.1** (Linux x86-64 only)

.. _what's new in PyPy2.7?: http://doc.pypy.org/en/latest/release-pypy2.7-v5.4.0.html
.. _what's new in PyPy3.3?: http://doc.pypy.org/en/latest/release-pypy3.3-v5.2-alpha1.html


.. class:: download_menu

 * Download

   * `Default (with a JIT Compiler)`_
   * `Other versions`_

 * `Installing`_ (optional)
 * `Installing more modules`_
 * `Installing NumPy`_ (optional)
 * `Building from source`_
 * `Packaging`_
 * `Checksums`_

.. _`Default (with a JIT Compiler)`:

"JIT Compiler" version
-------------------------------

These binaries include a Just-in-Time compiler.  They only work on
x86 CPUs that have the SSE2_ instruction set (most of
them do, nowadays), or on x86-64 CPUs. They also contain `stackless`_
extensions, like `greenlets`_.

Linux binaries and common distributions
---------------------------------------

Linux binaries are dynamically linked, as is usual, and thus might
not be usable due to the sad story of linux binary compatibility.  This means
that **Linux binaries are only usable on the distributions written next to
them** unless you're ready to hack your system by adding symlinks to the
libraries it tries to open.  There are better solutions:

* use Squeaky's `portable Linux binaries`_.

* or download PyPy from your release vendor (usually an outdated
  version): `Ubuntu`_ (`PPA`_), `Debian`_, `Homebrew`_, MacPorts,
  `Fedora`_, `Gentoo`_ and `Arch`_ are known to package PyPy, with various
  degrees of being up-to-date.

* or translate_ your own PyPy.

.. _`Ubuntu`: http://packages.ubuntu.com/search?keywords=pypy&searchon=names
.. _`PPA`: https://launchpad.net/~pypy/+archive/ppa
.. _`Debian`: http://packages.debian.org/sid/pypy
.. _`Fedora`: http://fedoraproject.org/wiki/Features/PyPyStack
.. _`Gentoo`: http://packages.gentoo.org/package/dev-python/pypy
.. _`Homebrew`: https://github.com/mxcl/homebrew/blob/master/Library/Formula/pypy.rb
.. _`Arch`: https://wiki.archlinux.org/index.php/PyPy
.. _`portable Linux binaries`: https://github.com/squeaky-pl/portable-pypy#portable-pypy-distribution-for-linux


Python2.7 compatible PyPy 5.4.0
-----------------------------------

* `Linux x86 binary (32bit, tar.bz2 built on Ubuntu 12.04 - 14.04)`__ (see ``[1]`` below)
* `Linux x86-64 binary (64bit, tar.bz2 built on Ubuntu 12.04 - 14.04)`__ (see ``[1]`` below)
* `ARM Hardfloat Linux binary (ARMHF/gnueabihf, tar.bz2, Raspbian)`__ (see ``[1]`` below)
* `ARM Hardfloat Linux binary (ARMHF/gnueabihf, tar.bz2, Ubuntu Raring)`__ (see ``[1]`` below)
* `ARM Softfloat Linux binary (ARMEL/gnueabi, tar.bz2,  Ubuntu Precise)`__ (see ``[1]`` below)
* `Mac OS/X binary (64bit)`__
* FreeBSD 9.2 x86 64 bit *(hopefully availabe soon)* (see ``[1]`` below)
* `Windows binary (32bit)`__ (you might need the VS 2008 runtime library
  installer `vcredist_x86.exe`_.)
* `PowerPC PPC64 Linux binary (64bit big-endian, Fedora 20)`__ (see ``[1]`` below)
* `PowerPC PPC64le Linux binary (64bit little-endian, Fedora 21)`__ (see ``[1]`` below)
* `s390x Linux binary (tar.bz2 built on Redhat Linux 7.2)`__ (see ``[1]`` below)
* `Source (tar.bz2)`__; `Source (zip)`__.  See below for more about the sources.
* `All our downloads,`__ including previous versions.  We also have a
  mirror_, but please use only if you have troubles accessing the links above

.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-linux32.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-linux64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-linux-armhf-raspbian.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-linux-armhf-raring.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-linux-armel.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-osx64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-win32.zip
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-ppc64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-ppc64le.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-s390x.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-src.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-src.zip
.. _`vcredist_x86.exe`: http://www.microsoft.com/en-us/download/details.aspx?id=5582
.. __: https://bitbucket.org/pypy/pypy/downloads
.. _mirror: http://buildbot.pypy.org/mirror/

Python 3.3.5 compatible PyPy3.3 v5.2
-------------------------------------

.. class:: download_menu

    Warning: this is an alpha release supporting the Python 3.3 language.
    It's also known to be (sometimes much) slower than PyPy 2.

* `Linux x86 binary (32bit, tar.bz2 built on Ubuntu 12.04 - 14.04)`__ (see ``[1]`` below)
* `Linux x86-64 binary (64bit, tar.bz2 built on Ubuntu 12.04 - 14.04)`__ (see ``[1]`` below)
* `ARM Hardfloat Linux binary (ARMHF/gnueabihf, tar.bz2, Raspbian)`__ (see ``[1]`` below)
* `ARM Hardfloat Linux binary (ARMHF/gnueabihf, tar.bz2, Ubuntu Raring)`__ (see ``[1]`` below)
* `ARM Softfloat Linux binary (ARMEL/gnueabi, tar.bz2,  Ubuntu Precise)`__ (see ``[1]`` below)
* `Mac OS/X binary (64bit)`__
* Windows binary (32bit) (hopefully availabe soon) (you might need the `VS 2008 runtime library
  installer vcredist_x86.exe`_.)
* `s390x Linux binary (tar.bz2 built on Redhat Linux 7.2)`__ (see ``[1]`` below)
* `Source (tar.bz2)`__
* `Source (zip)`__
* `All our downloads,`__ including previous versions.  We also have a
  mirror_, but please use only if you have troubles accessing the links above

.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3.3-v5.2.0-alpha1-linux32.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3.3-v5.2.0-alpha1-linux64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3.3-v5.2.0-alpha1-linux-armhf-raspbian.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3.3-v5.2.0-alpha1-linux-armhf-raring.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3.3-v5.2.0-alpha1-linux-armel.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3.3-v5.2.0-alpha1-osx64.tar.bz2
.. _`VS 2008 runtime library installer vcredist_x86.exe`: http://www.microsoft.com/en-us/download/details.aspx?id=5582
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3.3-v5.2.0-alpha1-s390x.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3.3-v5.2.0-alpha1-src.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy3.3-v5.2.0-alpha1-src.zip
.. __: https://bitbucket.org/pypy/pypy/downloads

If your CPU is really, really old, it may be a x86-32 without SSE2.
There is untested support for manually translating PyPy's JIT without
SSE2 (``--jit-backend=x86-without-sse2``) but note that your machine
is probably low-spec enough that running CPython on it is a better
idea in the first place.

``[1]:`` stating it again: the Linux binaries are provided for the
distributions listed here.  **If your distribution is not exactly this
one, it won't work,** you will probably see: ``pypy: error while loading shared
libraries: ...``.  Unless you want to hack a lot, try out the
`portable Linux binaries`_.


PyPy-STM 2.5.1
------------------------------

This is a special version of PyPy!  See the `Software Transactional
Memory`_ (STM) documentation.

* `PyPy-STM Linux x86-64 binary (64bit, tar.bz2 built on Ubuntu 12.04 - 14.04)`__

.. _`Software Transactional Memory`: http://doc.pypy.org/en/latest/stm.html
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy-stm-2.5.1-linux64.tar.bz2


.. _`Other versions (without a JIT)`:

Other versions
-------------------------------

The other versions of PyPy are:

* The most up-to-date `nightly binary builds`_ with a JIT, if the official
  release is too old for what you want to do. There are versions for
  different libc on this site too.

* Sandboxing: A special safe version.  Read the docs about sandboxing_.
  (It is also possible to translate_ a version that includes both
  sandboxing and the JIT compiler, although as the JIT is relatively
  complicated, this reduces a bit the level of confidence we can put in
  the result.) **Note that the sandboxed binary needs a full pypy checkout
  to work**. Consult the `sandbox docs`_ for details. (These are old,
  PyPy 1.8.)

  * `Linux binary (64bit)`__

  * `Linux binary (32bit)`__

.. __: https://bitbucket.org/pypy/pypy/downloads/pypy-1.8-sandbox-linux64.tar.bz2
.. __: https://bitbucket.org/pypy/pypy/downloads/pypy-1.8-sandbox-linux.tar.bz2
.. _`sandbox docs`: http://doc.pypy.org/en/latest/sandbox.html

.. _`nightly binary builds`: http://buildbot.pypy.org/nightly/trunk/

Installing 
----------

All binary versions are packaged in a ``tar.bz2`` or ``zip`` file.  When
uncompressed, they run in-place.  For now you can uncompress them
either somewhere in your home directory or, say, in ``/opt``, and
if you want, put a symlink from somewhere like
``/usr/local/bin/pypy`` to ``/path/to/pypy2-5.4.0/bin/pypy``.  Do
not move or copy the executable ``pypy`` outside the tree --- put
a symlink to it, otherwise it will not find its libraries.


Installing more modules
-------------------------------

The recommended way is to install ``pip``, which is the standard package
manager of Python.  It works like it does on CPython as explained in the 
`installation documentation`_.

.. _installation documentation: http://doc.pypy.org/en/latest/install.html


Installing NumPy
-------------------------------

**There are two different versions of NumPy for PyPy.**


1. NumPy via cpyext
+++++++++++++++++++

The generally recommended way is to install the original NumPy via the
CPython C API compatibility layer, cpyext.  Modern versions of PyPy
support enough of the C API to make this a reasonable choice in many
cases.  Performance-wise, the speed is mostly the same as CPython's
NumPy (it is the same code); the exception is that interactions between
the Python side and NumPy objects are mediated through the slower cpyext
layer (which hurts a few benchmarks that do a lot of element-by-element
array accesses, for example).

Installation works as usual.  For example, without using a virtualenv::
    
    $ ./pypy-xxx/bin/pypy -m ensurepip
    $ ./pypy-xxx/bin/pip install numpy

(See the general `installation documentation`_ for more.)


2. NumPyPy
++++++++++

The "numpy" module can be installed from `our own repository`__ rather
than from the official source.  This version uses internally our
built-in ``_numpypy`` module.  This module is slightly incomplete.
Also, its performance is hard to predict exactly.  For regular NumPy
source code that handles large arrays, it is likely to be slower than
the native NumPy with cpyext.  It is faster on the kind of code that
contains many Python loops doing things on an element-by-element basis.

.. __: https://bitbucket.org/pypy/numpy

Installation (see the `installation documentation`_ for installing ``pip``)::

    pypy -m pip install git+https://bitbucket.org/pypy/numpy.git

Alternatively, the direct way::

    git clone https://bitbucket.org/pypy/numpy.git
    cd numpy
    pypy setup.py install

If you installed to a system directory, you need to also run this once::

    sudo pypy -c 'import numpy'

Note again that this version is still a work-in-progress: many things do
not work and those that do may not be any faster than NumPy on CPython.
For further instructions see `the pypy/numpy repository`__.

.. __: https://bitbucket.org/pypy/numpy


.. _translate:

Building from source 
--------------------

(see more build instructions_)


1. Get the source code.  The following packages contain the source at
   the same revision as the above binaries:

   * `pypy2-v5.4.0-src.tar.bz2`__ (sources)

   .. __: https://bitbucket.org/pypy/pypy/downloads/pypy2-v5.4.0-src.tar.bz2

   Or you can checkout the current trunk using Mercurial_ (the trunk
   usually works and is of course more up-to-date)::

     hg clone https://bitbucket.org/pypy/pypy

   The above command may take a long time to run and if it aborts, it
   is not resumable.  You may prefer this way::

     hg clone -r null https://bitbucket.org/pypy/pypy
     cd pypy
     hg unbundle http://buildbot.pypy.org/bundle/pypy-bundle-01.bz2
     hg unbundle http://buildbot.pypy.org/bundle/pypy-bundle-02.bz2
     hg unbundle http://buildbot.pypy.org/bundle/pypy-bundle-03.bz2
     hg unbundle http://buildbot.pypy.org/bundle/pypy-bundle-04.bz2
     hg unbundle http://buildbot.pypy.org/bundle/pypy-bundle-05.bz2
     hg unbundle http://buildbot.pypy.org/bundle/pypy-bundle-06.bz2
     hg unbundle http://buildbot.pypy.org/bundle/pypy-bundle-07.bz2
     hg unbundle http://buildbot.pypy.org/bundle/pypy-bundle-08.bz2
     hg unbundle http://buildbot.pypy.org/bundle/pypy-bundle-09.bz2
     hg pull
     hg update

   If needed, you can also download the bz2 files by other means.
   You can then replace the multiple ``unbundle`` commands above with
   a single ``hg unbundle pypy-bundle-*.bz2``.

2. Make sure you **installed the dependencies.**  See the list here__.

   .. __: http://pypy.readthedocs.org/en/latest/build.html#install-build-time-dependencies

3. Enter the ``goal`` directory::

     cd pypy/pypy/goal

4. Run the ``rpython`` script.  Here are the common combinations
   of options (works also with ``python`` instead of ``pypy``;
   requires Python 2.x or PyPy 2)::

     pypy ../../rpython/bin/rpython -Ojit targetpypystandalone           # get the JIT version
     pypy ../../rpython/bin/rpython -O2 targetpypystandalone             # get the no-jit version
     pypy ../../rpython/bin/rpython -O2 --sandbox targetpypystandalone   # get the sandbox version

5. Enjoy Mandelbrot ``:-)``  It takes on the order of half an hour to
   finish the translation, and about 3GB of RAM on a 32-bit system
   and about 5GB on 64-bit systems.  (Do not start a translation on a
   machine with insufficient RAM!  It will just swap forever.  See
   notes below in that case.)

6. If you want to install this PyPy as root, please read the next section,
   Packaging_.

Notes:

* It is recommended to use PyPy to do translations, instead of using CPython,
  because it is twice as fast.  You should just start by downloading an
  official release of PyPy (with the JIT).  If you really have to use CPython
  then note that we are talking about CPython 2.7 here, not CPython 3.x.
  (Older versions like 2.6 are out.)

* On some 32-bit systems, the address space limit of 2 or 3 GB of RAM
  can be an issue.  More generally you may be just a little bit low of
  RAM.  First note that 2 GB is really not enough nowadays; on Windows
  you first need to refer to the `Windows build instructions`_.  More
  precisely, translation on 32-bit takes at this point 2.7 GB if PyPy is
  used and 2.9 GB if CPython is used.  There are two workarounds:

  1. use PyPy, not CPython.  If you don't have any PyPy so far, not even
  an older version, then you need to build one first, with some parts
  removed.  So, first translate with ``...rpython -Ojit
  targetpypystandalone --withoutmod-micronumpy --withoutmod-cpyext``,
  then copy ``pypy-c`` and ``libpypy_c.so`` somewhere else, and finally
  call it with ``...pypy-c ../../rpython/bin/rpython -Ojit``.

  2. if even using PyPy instead of CPython is not enough, try to tweak
  some internal parameters.  Example (slower but saves around 400MB)::

    PYPY_DONT_RUN_SUBPROCESS=1 PYPY_GC_MAX_DELTA=200MB pypy --jit loop_longevity=300 ../../rpython/bin/rpython -Ojit --source
    # then read the next point about --source

* You can run translations with ``--source``, which only builds the C
  source files (and prints at the end where).  Then you can ``cd`` there
  and execute ``make``.  This is another way to reduce memory usage.
  Note that afterwards, you have to run manually ``pypy-c
  .../pypy/tool/build_cffi_imports.py`` if you want to be able to import
  the cffi-based modules.

* On Linux, because of ``asmgcroot``, compiling the generated C files
  is delicate.  It requires using gcc with no particularly
  fancy options.  It does not work e.g. with clang, or if you pass uncommon
  options with the ``CFLAGS`` environment variable.  If you insist on
  passing these options or using clang, then you can compile PyPy with
  the `shadow stack`_ option instead (for some performance price in
  non-JITted code).

* Like other JITs, PyPy doesn't work out of the box on some Linux
  distributions that trade full POSIX compliance for extra security
  features.  E.g. with PAX, you have to run PyPy with ``paxctl -cm``.
  This also applies to translation (unless you use CPython to run the
  translation and you specify ``--source``).

.. _instructions: http://pypy.readthedocs.org/en/latest/build.html
.. _`x86 (IA-32)`: http://en.wikipedia.org/wiki/IA-32
.. _`x86-64`: http://en.wikipedia.org/wiki/X86-64
.. _SSE2: http://en.wikipedia.org/wiki/SSE2
.. _`contact us`: contact.html
.. _`sandboxing`: features.html#sandboxing
.. _`stackless`: http://www.stackless.com/
.. _`greenlets`: http://pypy.readthedocs.org/en/latest/stackless.html#greenlets
.. _`Windows build instructions`: http://doc.pypy.org/en/latest/windows.html#preparing-windows-for-the-large-build
.. _`shadow stack`: http://pypy.readthedocs.org/en/latest/config/translation.gcrootfinder.html
.. _Mercurial: https://www.mercurial-scm.org/

Packaging
---------

Once PyPy is translated from source the binary package similar to those 
provided in the section `Default (with a JIT Compiler)`_ above could be 
easily created with ``package.py`` script as following::

    cd ./pypy/pypy/tool/release/
    python package.py --help #for information
    python package.py --archive-name pypy-my-own-package-name

It is recommended to use package.py because custom scripts will
invariably become out-of-date.  If you want to write custom scripts
anyway, note an easy-to-miss point: some modules are written with CFFI,
and require some compilation.  If you install PyPy as root without
pre-compiling them, normal users will get errors:

* PyPy 2.5.1 or earlier: normal users would see permission errors.
  Installers need to run ``pypy -c "import gdbm"`` and other similar
  commands at install time; the exact list is in `package.py`_.  Users
  seeing a broken installation of PyPy can fix it after-the-fact if they
  have sudo rights, by running once e.g. ``sudo pypy -c "import gdbm``.

* PyPy 2.6 and later: anyone would get ``ImportError: no module named
  _gdbm_cffi``.  Installers need to run ``pypy _gdbm_build.py`` in the
  ``lib_pypy`` directory during the installation process (plus others;
  see the exact list in `package.py`_).  Users seeing a broken
  installation of PyPy can fix it after-the-fact, by running ``pypy
  /path/to/lib_pypy/_gdbm_build.py``.  This command produces a file
  called ``_gdbm_cffi.pypy-26.so`` locally, which is a C extension
  module for PyPy.  You can move it at any place where modules are
  normally found: e.g. in your project's main directory, or in a
  directory that you add to the env var ``PYTHONPATH``.

.. _`package.py`: https://bitbucket.org/pypy/pypy/src/default/pypy/tool/release/package.py

Checksums
---------

Here are the checksums for each of the downloads

pypy2.7-v5.4.1 md5::

    70958c05af6628a66db5072ef1c72522  pypy2-v5.4.1-linux-armel.tar.bz2
    5246b7b963689ec5b70291c2b104476a  pypy2-v5.4.1-linux-armhf-raring.tar.bz2
    106cfa49756df7ae3bf531ce6659d0ed  pypy2-v5.4.1-linux-armhf-raspbian.tar.bz2
    f561bedb338fa09f011eaf1edac0faf1  pypy2-v5.4.1-linux32.tar.bz2
    df1327fc3cd41a1ff860e90b5a901899  pypy2-v5.4.1-linux64.tar.bz2
    b24ebe9f4825fc05afd76a9e8f47018c  pypy2-v5.4.1-osx64.tar.bz2
    b8e90edf11639d1757413c8bf5a11d49  pypy2-v5.4.1-ppc64.tar.bz2
    55f6747988d981699e52a7c60aed8a7f  pypy2-v5.4.1-ppc64le.tar.bz2
    082cca9bb948c8b1389c35db7174396a  pypy2-v5.4.1-s390x.tar.bz2
    129e730c84f55133b9694bc48e2d4812  pypy2-v5.4.1-src.tar.bz2
    f20a420d90475b72c6ef8b4ab90377f0  pypy2-v5.4.1-src.zip
    125874d61b4ac4e2fd7d0b7c2db3b041  pypy2-v5.4.1-win32.zip

pypy3.3-v5.2-alpha md5::

    1176464541dff42e685bf8a9bb393796  pypy3.3-v5.2.0-alpha1-linux32.tar.bz2
    dc893175a5cae269017bb89637c3f260  pypy3.3-v5.2.0-alpha1-linux64.tar.bz2
    dd741fd946c4d80486a333b89a6fe555  pypy3.3-v5.2.0-alpha1-linux-armel.tar.bz2
    c2ff2f04a88415ea10e51e47a3ed19e6  pypy3.3-v5.2.0-alpha1-linux-armhf-raring.tar.bz2
    fede8d6612f921967cd91bfbfaa448ea  pypy3.3-v5.2.0-alpha1-linux-armhf-raspbian.tar.bz2
    e1cfcd84dab5ded374802231c3e6f9f2  pypy3.3-v5.2.0-alpha1-osx64.tar.bz2
    08b9b4dc0ab11fa22f0fc57ba9a62d2b  pypy3.3-v5.2.0-alpha1-s390x.tar.bz2
    e4bbd6fe42481a17f705611d76914eda  pypy3.3-v5.2.0-alpha1-src.tar.bz2
    49402ad4c853e15e749514649b59220d  pypy3.3-v5.2.0-alpha1-src.zip

pypy-1.8 sandbox md5::

    2c9f0054f3b93a6473f10be35277825a  pypy-1.8-sandbox-linux64.tar.bz2
    009c970b5fa75754ae4c32a5d108a8d4  pypy-1.8-sandbox-linux.tar.bz2


pypy2.7-5.4.1 sha1::

    74fea5a7a0a3d8c899404ddc8c0296d4bf4ca3d0  pypy2-v5.4.1-linux-armel.tar.bz2
    4c72d94325567d2079ca5021da3cba6cbc835744  pypy2-v5.4.1-linux-armhf-raring.tar.bz2
    18486da20d2513c083be308f8222f83f80c74671  pypy2-v5.4.1-linux-armhf-raspbian.tar.bz2
    c38c40dfcbe9cba712a508fed0ea3dc6da5e2b7c  pypy2-v5.4.1-linux32.tar.bz2
    2c9a45c1bf67d8f2fac9d09e082f059ce892f291  pypy2-v5.4.1-linux64.tar.bz2
    765bed9e45fa58a6f65ae20ff28b5e39beb56793  pypy2-v5.4.1-osx64.tar.bz2
    6e73fa972ca01d58e95b36f133319bff0cc66876  pypy2-v5.4.1-ppc64.tar.bz2
    4410c7514328d936084b00ac9d01af1aecdc7289  pypy2-v5.4.1-ppc64le.tar.bz2
    8726412fcbaea859f21fb4b1c21fd5832e4c56d7  pypy2-v5.4.1-s390x.tar.bz2
    0d865c16a3779f492b7f4687cd46c21bbfc05609  pypy2-v5.4.1-src.tar.bz2
    8f898a052786d3b60e9effe162c15fa572a5f52d  pypy2-v5.4.1-src.zip
    21958b782dc727a0be3bbc248e0ca9af18305654  pypy2-v5.4.1-win32.zip

pypy3.3-v5.2-alpha sha1::

    03c1181f3866b977598e56b4263c8373d3f3a712  pypy3.3-v5.2.0-alpha1-linux32.tar.bz2
    ae62d0df060e245b30eb07f12c5bc2260695ac36  pypy3.3-v5.2.0-alpha1-linux64.tar.bz2
    cf09edf1232a7bbb475fb19c8e6080d590774c4e  pypy3.3-v5.2.0-alpha1-linux-armel.tar.bz2
    3bec09a599371d0aca5408022a9ff4600f801e78  pypy3.3-v5.2.0-alpha1-linux-armhf-raring.tar.bz2
    addfd4466e4dead5a4e620214a015a314bfee83e  pypy3.3-v5.2.0-alpha1-linux-armhf-raspbian.tar.bz2
    f4a3badfe4c70465e9a2a43fde19e7a92975bc20  pypy3.3-v5.2.0-alpha1-osx64.tar.bz2
    eb630112d27063ba336b1d11d083edcda98c3a1f  pypy3.3-v5.2.0-alpha1-s390x.tar.bz2
    4b31ab492716ea375dd090bbacdf3d7c2d483059  pypy3.3-v5.2.0-alpha1-src.tar.bz2
    d9f5b64f144ebec1a200156809fbbe04fdf7eb7e  pypy3.3-v5.2.0-alpha1-src.zip

pypy2.7-5.4.1 sha256::

    8925b76fe9ca6f960d8f914ed67f7a3c52ce2b4c65fa71a5ef7d4b285c2c3a36  pypy2-v5.4.1-linux-armel.tar.bz2
    0213b0d948ae0afea8b4cb93f08e55b0562522b3ab8f2706c4e22ffe8cd86f84  pypy2-v5.4.1-linux-armhf-raring.tar.bz2
    2daee13ec1836c1041c89c18d9514134ff606dc3648fc6304611eb1ec0819289  pypy2-v5.4.1-linux-armhf-raspbian.tar.bz2
    85bccf8679f908c08850115fe74325474fe1b2e1e793c147d1fa484b56472b12  pypy2-v5.4.1-linux32.tar.bz2
    06c29d59565d9fdb618ed8aa730e05cf975da21158955591dff38d9e305af074  pypy2-v5.4.1-linux64.tar.bz2
    507c81af9ca302c67a582255306529f88fba56760d353e17d667a114eee1f7e2  pypy2-v5.4.1-osx64.tar.bz2
    c11b37f5e97b647003426987e223d75a0dc0da1ecc35675ddad0af8a9add972d  pypy2-v5.4.1-ppc64.tar.bz2
    652d97fbd574d0349f7aa8b37c8c5a1238ed0cd3d6b68cf2ea8280b7ead4c7ad  pypy2-v5.4.1-ppc64le.tar.bz2
    987b3354dcbed5fd3f0d8d9d1484a259f0dff97da5d11a84b354c6e61a4af891  pypy2-v5.4.1-s390x.tar.bz2
    92af82664ace96d721c66dbe8726d4f39c7d01f568d9df56c11149be2960238f  pypy2-v5.4.1-src.tar.bz2
    08148d1157dd16f402c7844fc0cdfde9e7d187c7fd1549a93e888e2fd13828bf  pypy2-v5.4.1-src.zip
    b703224af4e99243d090783a7b685063da7ba01ef28bb99a89cacfce2fb0dfc2  pypy2-v5.4.1-win32.zip

pypy3.3-v5.2-alpha sha256::

    351aec101bdedddae7ea1b63845a5654b1a95fc9393894ef84a66749f6945f17  pypy3.3-v5.2.0-alpha1-linux32.tar.bz2
    f5e66ab24267d6ddf662d07c512d06c10ebc732ae62093dabbd775ac63b9060a  pypy3.3-v5.2.0-alpha1-linux64.tar.bz2
    ac83e632213f078ab60045e6ad0564b146d65dcd9a52c130026fab6dd85bf2dc  pypy3.3-v5.2.0-alpha1-linux-armel.tar.bz2
    b4d847d33c1bf9b3956d1d17b9e37505eb32f68e341c9333a74a82010a63e799  pypy3.3-v5.2.0-alpha1-linux-armhf-raring.tar.bz2
    ba9a5d0cbac1c622363315b30df288ab2cf8fcccf7e2882bf5946115dbfa657e  pypy3.3-v5.2.0-alpha1-linux-armhf-raspbian.tar.bz2
    abaceab5d2790f49e04e0d80669283da41f94b77cf483b30ac0de48d3c19f304  pypy3.3-v5.2.0-alpha1-osx64.tar.bz2
    b0422f4122c214d37d5a2f0f2cc95e3f823bf653e39d742e7de3c8c406c11399  pypy3.3-v5.2.0-alpha1-s390x.tar.bz2
    344c2f088c82ea1274964bb0505ab80d3f9e538cc03f91aa109325ddbaa61426  pypy3.3-v5.2.0-alpha1-src.tar.bz2
    d31eafa86fa57f70a89ae670e19be08765c0678443a076076eff206160d0594c  pypy3.3-v5.2.0-alpha1-src.zip

pypy-1.8 sandbox sha1::

   895aaf7bba5787dd30adda5cc0e0e7fc297c0ca7  pypy-1.8-sandbox-linux64.tar.bz2
   be94460bed8b2682880495435c309b6611ae2c31  pypy-1.8-sandbox-linux.tar.bz2

